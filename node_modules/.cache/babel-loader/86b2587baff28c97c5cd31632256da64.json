{"ast":null,"code":"var _jsxFileName = \"/Users/emmateglbraender/Documents/ITU/2semester/Frameworks and Architectures for the Web/Mini projects/Mini project 3/hot_liquids/src/Components/Checkbox.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { BoxContext } from './CheckBoxContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function CheckBox() {\n  _s();\n\n  const boxContext = useContext(BoxContext);\n  if (!boxContext) throw new Error(\"FormContext is undefined!\");\n  let checked = boxContext.checkBox.checked;\n  let name = boxContext.checkBox.name;\n  /* let checkedB = boxContext.checkBox.checkedB; */\n\n  /* let checkedC = boxContext.checkBox.checkedC; */\n\n  const [checkBoxes, setCheckBoxes] = React.useState({\n    checked: checked,\n    name: name\n    /* , checkedB: checkedB, checkedC: checkedC */\n\n  });\n\n  const handleC = event => {\n    setCheckBoxes({ ...checkBoxes,\n      [event.target.name]: event.target.checked\n    });\n    /* setCheckBoxes((prev) => ({ ...prev, ...{ [event.target.name]:event.target.checked } })); */\n\n    /* console.log(checkBoxes.checkedA) */\n  };\n\n  if (checkBoxes.checked == false) {\n    console.log(\"false1\");\n  }\n\n  if (checkBoxes.checked == true) {\n    console.log(\"true\");\n  }\n\n  console.log(checkBoxes.checked);\n  return /*#__PURE__*/_jsxDEV(FormGroup, {\n    row: true,\n    children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n      control: /*#__PURE__*/_jsxDEV(Checkbox, {\n        checked: checkBoxes.checked,\n        onChange: handleC,\n        name: \"checked\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this),\n      label: \"Secondary\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n      control: /*#__PURE__*/_jsxDEV(Checkbox, {\n        checked: checkBoxes.checked,\n        onChange: handleC,\n        name: \"checkedB\",\n        color: \"primary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this),\n      label: \"Primary\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n      control: /*#__PURE__*/_jsxDEV(Checkbox, {\n        checked: checkBoxes.checked,\n        onChange: handleC,\n        name: \"checkedC\",\n        color: \"primary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 10\n      }, this),\n      label: \"Primary\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CheckBox, \"xj5shDBohVevJWhoZzp7tGeyIAY=\");\n\n_c = CheckBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckBox\");","map":{"version":3,"sources":["/Users/emmateglbraender/Documents/ITU/2semester/Frameworks and Architectures for the Web/Mini projects/Mini project 3/hot_liquids/src/Components/Checkbox.tsx"],"names":["React","useContext","FormGroup","FormControlLabel","Checkbox","BoxContext","CheckBox","boxContext","Error","checked","checkBox","name","checkBoxes","setCheckBoxes","useState","handleC","event","target","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAA6C,OAA7C;AAGA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;AACA,OAAOC,QAAP,MAAwC,4BAAxC;AACA,SAASC,UAAT,QAAqC,mBAArC;;AAGA,OAAO,SAASC,QAAT,GAAmB;AAAA;;AAC1B,QAAMC,UAAU,GAAGN,UAAU,CAACI,UAAD,CAA7B;AAEA,MAAI,CAACE,UAAL,EACE,MAAM,IAAIC,KAAJ,CAAU,2BAAV,CAAN;AAEA,MAAIC,OAAO,GAAGF,UAAU,CAACG,QAAX,CAAoBD,OAAlC;AACA,MAAIE,IAAI,GAAGJ,UAAU,CAACG,QAAX,CAAoBC,IAA/B;AACA;;AACA;;AAEA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8Bb,KAAK,CAACc,QAAN,CAAyB;AAAEL,IAAAA,OAAO,EAAEA,OAAX;AAAoBE,IAAAA,IAAI,EAACA;AAAI;;AAA7B,GAAzB,CAApC;;AAEA,QAAMI,OAAO,GAAIC,KAAD,IAA6D;AAC3EH,IAAAA,aAAa,CAAC,EAAE,GAAGD,UAAL;AAAiB,OAACI,KAAK,CAACC,MAAN,CAAaN,IAAd,GAAqBK,KAAK,CAACC,MAAN,CAAaR;AAAnD,KAAD,CAAb;AACA;;AACA;AACH,GAJC;;AAMF,MAAIG,UAAU,CAACH,OAAX,IAAsB,KAA1B,EAAgC;AAC5BS,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACH;;AACD,MAAIP,UAAU,CAACH,OAAX,IAAsB,IAA1B,EAA+B;AAC3BS,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACH;;AAEDD,EAAAA,OAAO,CAACC,GAAR,CAAYP,UAAU,CAACH,OAAvB;AACA,sBACI,QAAC,SAAD;AAAW,IAAA,GAAG,MAAd;AAAA,4BACE,QAAC,gBAAD;AACE,MAAA,OAAO,eACP,QAAC,QAAD;AACA,QAAA,OAAO,EAAEG,UAAU,CAACH,OADpB;AAEA,QAAA,QAAQ,EAAEM,OAFV;AAGA,QAAA,IAAI,EAAC;AAHL;AAAA;AAAA;AAAA;AAAA,cAFF;AAME,MAAA,KAAK,EAAC;AANR;AAAA;AAAA;AAAA;AAAA,YADF,eASE,QAAC,gBAAD;AACE,MAAA,OAAO,eACL,QAAC,QAAD;AACE,QAAA,OAAO,EAAEH,UAAU,CAACH,OADtB;AAEE,QAAA,QAAQ,EAAEM,OAFZ;AAGE,QAAA,IAAI,EAAC,UAHP;AAIE,QAAA,KAAK,EAAC;AAJR;AAAA;AAAA;AAAA;AAAA,cAFJ;AASE,MAAA,KAAK,EAAC;AATR;AAAA;AAAA;AAAA;AAAA,YATF,eAoBG,QAAC,gBAAD;AACC,MAAA,OAAO,eACN,QAAC,QAAD;AACG,QAAA,OAAO,EAAEH,UAAU,CAACH,OADvB;AAEG,QAAA,QAAQ,EAAEM,OAFb;AAGG,QAAA,IAAI,EAAC,UAHR;AAIG,QAAA,KAAK,EAAC;AAJT;AAAA;AAAA;AAAA;AAAA,cAFF;AASC,MAAA,KAAK,EAAC;AATP;AAAA;AAAA;AAAA;AAAA,YApBH;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAkCC;;GA7DeT,Q;;KAAAA,Q","sourcesContent":["import React, { useContext, useEffect } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { green } from '@material-ui/core/colors';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\nimport { BoxContext, checkBoz } from './CheckBoxContext';\n\n\nexport function CheckBox(){\nconst boxContext = useContext(BoxContext)\n\nif (!boxContext)\n  throw(new Error(\"FormContext is undefined!\"))\n  \n  let checked = boxContext.checkBox.checked;\n  let name = boxContext.checkBox.name;\n  /* let checkedB = boxContext.checkBox.checkedB; */\n  /* let checkedC = boxContext.checkBox.checkedC; */\n\n  const [checkBoxes, setCheckBoxes] = React.useState<checkBoz>({ checked: checked, name:name/* , checkedB: checkedB, checkedC: checkedC */});\n\n  const handleC = (event: { target: { name: string; checked: boolean; }; }) => {\n    setCheckBoxes({ ...checkBoxes, [event.target.name]: event.target.checked });\n    /* setCheckBoxes((prev) => ({ ...prev, ...{ [event.target.name]:event.target.checked } })); */\n    /* console.log(checkBoxes.checkedA) */\n};\n\nif (checkBoxes.checked == false){\n    console.log(\"false1\")\n}\nif (checkBoxes.checked == true){\n    console.log(\"true\")\n}\n\nconsole.log(checkBoxes.checked)\nreturn (\n    <FormGroup row>\n      <FormControlLabel\n        control={\n        <Checkbox\n        checked={checkBoxes.checked}\n        onChange={handleC}\n        name=\"checked\" />}\n        label=\"Secondary\"\n      />\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={checkBoxes.checked}\n            onChange={handleC}\n            name=\"checkedB\"\n            color=\"primary\"\n          />\n        }\n        label=\"Primary\"\n      />\n       <FormControlLabel\n        control={\n         <Checkbox\n            checked={checkBoxes.checked}\n            onChange={handleC}\n            name=\"checkedC\"\n            color=\"primary\"\n        />\n     }\n        label=\"Primary\"\n />\n    </FormGroup>\n  );\n}"]},"metadata":{},"sourceType":"module"}