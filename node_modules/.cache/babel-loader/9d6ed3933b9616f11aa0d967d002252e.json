{"ast":null,"code":"var _jsxFileName = \"/Users/emmateglbraender/Documents/ITU/2semester/Frameworks and Architectures for the Web/Mini projects/Mini project 3/hot_liquids/src/Components/allproducts.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { useQuery } from 'react-query'; // Components\n\nimport Cart from '../Cart/Cart';\nimport Drawer from '@material-ui/core/Drawer';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Grid from '@material-ui/core/Grid';\nimport AddShoppingCartIcon from '@material-ui/icons/AddShoppingCart';\nimport Badge from '@material-ui/core/Badge'; // Styles\n\nimport { Wrapper, StyledButton } from '../App.styles'; // Types\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n// Example POST method implementation:\nasync function postData(product = '', data = {}) {\n  // Default options are marked with *\n  const response = await fetch(product, {\n    method: 'POST',\n    // *GET, POST, PUT, DELETE, etc.\n    mode: 'cors',\n    // no-cors, *cors, same-origin\n    headers: {\n      'Content-Type': 'application/json' // 'Content-Type': 'application/x-www-form-urlencoded',\n\n    },\n    body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n\n  });\n  return response.json(); // parses JSON response into native JavaScript objects\n}\n\nconst getProducts = async () => await (await fetch('http://localhost:3000/products/info')).json();\n\nconst ProductList = () => {\n  _s();\n\n  const [cartOpen, setCartOpen] = useState(false);\n  const [cartItems, setCartItems] = useState([]);\n  const {\n    data,\n    isLoading,\n    error\n  } = useQuery('products', getProducts);\n  console.log(data);\n\n  const getTotalItems = items => items.reduce((ack, item) => ack + item.quantity, 0);\n\n  async function addToCart(id, quantity) {\n    try {\n      const response = await fetch(\"http://localhost:3000/customers/1/basket\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          productId: id,\n          quantity: 1\n        }),\n        headers: {\n          \"Content-type\": \"application/json; charset=UTF-8\"\n        }\n      });\n      let data = await response.json();\n      alert(\"Item Added To Cart\");\n      console.log(data);\n    } catch (err) {\n      alert(\"Something Went Wrong\");\n      console.log(err);\n    }\n  }\n\n  if (isLoading) return /*#__PURE__*/_jsxDEV(LinearProgress, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Something went wrong ...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: [/*#__PURE__*/_jsxDEV(Drawer, {\n      anchor: \"right\",\n      open: cartOpen,\n      onClose: () => setCartOpen(false),\n      children: /*#__PURE__*/_jsxDEV(Cart, {\n        cartItems: cartItems,\n        addToCart: handleAddToCart,\n        removeFromCart: handleRemoveFromCart\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StyledButton, {\n      onClick: () => setCartOpen(true),\n      children: /*#__PURE__*/_jsxDEV(Badge, {\n        badgeContent: getTotalItems(cartItems),\n        color: \"error\",\n        children: /*#__PURE__*/_jsxDEV(AddShoppingCartIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: data === null || data === void 0 ? void 0 : data.map(item => /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 4\n      }, item.productId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ProductList, \"sNjVdc7sEflwnqV2PP/uW1253TQ=\", false, function () {\n  return [useQuery];\n});\n\n_c = ProductList;\nexport default ProductList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductList\");","map":{"version":3,"sources":["/Users/emmateglbraender/Documents/ITU/2semester/Frameworks and Architectures for the Web/Mini projects/Mini project 3/hot_liquids/src/Components/allproducts.tsx"],"names":["useState","useQuery","Cart","Drawer","LinearProgress","Grid","AddShoppingCartIcon","Badge","Wrapper","StyledButton","postData","product","data","response","fetch","method","mode","headers","body","JSON","stringify","json","getProducts","ProductList","cartOpen","setCartOpen","cartItems","setCartItems","isLoading","error","console","log","getTotalItems","items","reduce","ack","item","quantity","addToCart","id","productId","alert","err","handleAddToCart","handleRemoveFromCart","map"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport { QueryKey, useQuery, UseQueryOptions } from 'react-query';\n// Components\nimport Item from '../Item/Item';\nimport Cart from '../Cart/Cart';\nimport Drawer from '@material-ui/core/Drawer';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Grid from '@material-ui/core/Grid';\nimport AddShoppingCartIcon from '@material-ui/icons/AddShoppingCart';\nimport Badge from '@material-ui/core/Badge';\n// Styles\nimport { Wrapper, StyledButton } from '../App.styles';\n// Types\nexport type CartItemType = {\n  productId: number;\n  category: string;\n  description: string;\n  img_path: string;\n  price: number;\n  name: string;\n  quantity: number;\n};\n\n// Example POST method implementation:\nasync function postData(product = '', data = {}) {\n  // Default options are marked with *\n  const response = await fetch(product, {\n    method: 'POST', // *GET, POST, PUT, DELETE, etc.\n    mode: 'cors', // no-cors, *cors, same-origin\n    headers: {\n      'Content-Type': 'application/json'\n      // 'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n  });\n  return response.json(); // parses JSON response into native JavaScript objects\n}\n\nconst getProducts = async (): Promise<CartItemType[]> =>\n  await (await fetch('http://localhost:3000/products/info')).json();\n\nconst ProductList = () => {\n  const [cartOpen, setCartOpen] = useState(false);\n  const [cartItems, setCartItems] = useState([] as CartItemType[]);\n  const { data, isLoading, error } = useQuery<CartItemType[]>(\n    'products',\n    getProducts\n  );\n  console.log(data);\n\n  const getTotalItems = (items: CartItemType[]) =>\n    items.reduce((ack: number, item) => ack + item.quantity, 0);\n\n    async function addToCart(id: any, quantity: any) {\n      try {\n        const response = await fetch(\"http://localhost:3000/customers/1/basket\", {\n          method: \"POST\",\n          body: JSON.stringify({\n            productId: id,\n            quantity: 1,\n          }),\n          headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n          },\n        });\n        let data = await response.json();\n        alert(\"Item Added To Cart\");\n        console.log(data);\n      } catch (err) {\n        alert(\"Something Went Wrong\");\n        console.log(err);\n      }\n    }\n\n  if (isLoading) return <LinearProgress />;\n  if (error) return <div>Something went wrong ...</div>;\n\n  return (\n    <Wrapper>\n      <Drawer anchor='right' open={cartOpen} onClose={() => setCartOpen(false)}>\n        <Cart\n          cartItems={cartItems}\n          addToCart={handleAddToCart}\n          removeFromCart={handleRemoveFromCart}\n        />\n      </Drawer>\n      <StyledButton onClick={() => setCartOpen(true)}>\n        <Badge badgeContent={getTotalItems(cartItems)} color='error'>\n          <AddShoppingCartIcon />\n        </Badge>\n      </StyledButton>\n      <Grid container spacing={3}>\n        {data?.map(item => (\n          <Grid item key={item.productId} xs={12} sm={4}>\n            {/* <Item item={item} handleAddToCart={handleAddToCart} /> */}\n          </Grid>\n        ))}\n      </Grid>\n    </Wrapper>\n  );\n};\n\nexport default ProductList;\n"]},"metadata":{},"sourceType":"module"}