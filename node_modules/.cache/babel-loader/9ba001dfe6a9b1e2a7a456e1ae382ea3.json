{"ast":null,"code":"var _jsxFileName = \"/Users/emmateglbraender/Documents/ITU/2semester/Frameworks and Architectures for the Web/Mini projects/Mini project 3/hot_liquids/src/Components/stack.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Link } from 'react-router-dom';\nimport { useQuery } from \"react-query\";\nimport { Wrapper } from \"../App.styles\";\nimport { MyButtonGrid } from \"../App\";\nimport handleAddToCart from \"../App\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProductDetails = ({\n  match\n}) => {\n  _s();\n\n  const getProduct = async () => await (await fetch('http://localhost:3000/products/' + match.params.productId)).json();\n\n  const {\n    data\n  } = useQuery('product', getProduct);\n\n  if (data) {\n    /* console.log(data) */\n    //gives me the correct product based on URL\n    // {productId: 12, name: \"Green tea\", price: 40, img_path: \"Images/Teas/12.png\", description: \"Tasting notes: Cool mint, Ginger, Spices\"}\n    console.log(data.name); //gives error \"Property 'name' does not exist on type 'CartItemType[]\n  }\n  /* const product = data?.find((x) => x.productId === match.params.productId); */\n\n  /* console.log(product) */\n\n\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: data === null || data === void 0 ? void 0 : data.img_path,\n      alt: data === null || data === void 0 ? void 0 : data.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: data === null || data === void 0 ? void 0 : data.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: data === null || data === void 0 ? void 0 : data.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"$\", data === null || data === void 0 ? void 0 : data.price]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: {\n        pathname: `${data === null || data === void 0 ? void 0 : data.productId}`,\n        state: {\n          productObject: data\n        }\n      },\n      children: \"Product page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(MyButtonGrid, {\n      onClick: () => handleAddToCart(data),\n      children: \"Add to cart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 3\n  }, this);\n};\n\n_s(ProductDetails, \"wDefygpsWBVTl/fEL2emlq2/574=\", false, function () {\n  return [useQuery];\n});\n\n_c = ProductDetails;\nexport default ProductDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductDetails\");","map":{"version":3,"sources":["/Users/emmateglbraender/Documents/ITU/2semester/Frameworks and Architectures for the Web/Mini projects/Mini project 3/hot_liquids/src/Components/stack.tsx"],"names":["React","Link","useQuery","Wrapper","MyButtonGrid","handleAddToCart","ProductDetails","match","getProduct","fetch","params","productId","json","data","console","log","name","img_path","description","price","pathname","state","productObject"],"mappings":";;;AAAA,OAAOA,KAAP,MAA2C,OAA3C;AACA,SAAwBC,IAAxB,QAA8E,kBAA9E;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,OAAT,QAAwB,eAAxB;AACA,SAASC,YAAT,QAA6B,QAA7B;AACA,OAAOC,eAAP,MAA4B,QAA5B;;;AAYA,MAAMC,cAAc,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAA2B;AAAA;;AAC5C,QAAMC,UAAU,GAAG,YACnB,MAAM,CAAC,MAAMC,KAAK,CAAC,oCAAmCF,KAAK,CAACG,MAAN,CAAaC,SAAjD,CAAZ,EAAyEC,IAAzE,EADN;;AAEA,QAAM;AAACC,IAAAA;AAAD,MAASX,QAAQ,CACrB,SADqB,EAErBM,UAFqB,CAAvB;;AAKA,MAAGK,IAAH,EAAQ;AACN;AAAwB;AACxB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACG,IAAjB,EAHM,CAGiB;AACxB;AAEH;;AACA;;;AAEJ,sBACE,QAAC,OAAD;AAAA,4BACA;AAAK,MAAA,GAAG,EAAEH,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEI,QAAhB;AAA0B,MAAA,GAAG,EAAEJ,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEG;AAArC;AAAA;AAAA;AAAA;AAAA,YADA,eAEA;AAAA,8BACE;AAAA,kBAAKH,IAAL,aAAKA,IAAL,uBAAKA,IAAI,CAAEG;AAAX;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,kBAAIH,IAAJ,aAAIA,IAAJ,uBAAIA,IAAI,CAAEK;AAAV;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAA,wBAAML,IAAN,aAAMA,IAAN,uBAAMA,IAAI,CAAEM,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFA,eAQA,QAAC,IAAD;AAAM,MAAA,EAAE,EAAE;AACTC,QAAAA,QAAQ,EAAG,GAAEP,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEF,SAAU,EADpB;AAETU,QAAAA,KAAK,EAAE;AACPC,UAAAA,aAAa,EAAET;AADR;AAFE,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARA,eAgBA,QAAC,YAAD;AAAc,MAAA,OAAO,EAAE,MAAMR,eAAe,CAACQ,IAAD,CAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAhBA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoBC,CArCD;;GAAMP,c;UAGeJ,Q;;;KAHfI,c;AAuCN,eAAeA,cAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter, Link, match, NavLink, Route, Switch, useParams } from 'react-router-dom';\nimport { useQuery } from \"react-query\";\nimport { Wrapper } from \"../App.styles\";\nimport { MyButtonGrid } from \"../App\";\nimport handleAddToCart from \"../App\"\n\nexport type CartItemType = {\n    productId: number;\n    category: string;\n    description: string;\n    img_path: string;\n    price: number;\n    name: string;\n    quantity: number;\n  };\n\nconst ProductDetails = ({match}: {match: any}) => {\n      const getProduct = async (): Promise<CartItemType> =>\n      await (await fetch('http://localhost:3000/products/'+ match.params.productId)).json(); \n      const {data} = useQuery<CartItemType>(\n        'product',\n        getProduct\n      );\n\n      if(data){\n        /* console.log(data) */ //gives me the correct product based on URL\n        // {productId: 12, name: \"Green tea\", price: 40, img_path: \"Images/Teas/12.png\", description: \"Tasting notes: Cool mint, Ginger, Spices\"}\n        console.log(data.name) //gives error \"Property 'name' does not exist on type 'CartItemType[]\n      }\n\n    /* const product = data?.find((x) => x.productId === match.params.productId); */\n    /* console.log(product) */\n    \nreturn (\n  <Wrapper>\n  <img src={data?.img_path} alt={data?.name} />\n  <div>\n    <h3>{data?.name}</h3>\n    <p>{data?.description}</p>\n    <h3>${data?.price}</h3>\n  </div>\n  {/* <Button onClick={() => getDetails(item)}>See </Button> */}\n  <Link to={{\n   pathname: `${data?.productId}`,\n   state: {\n   productObject: data\n   }\n }}>\n   Product page\n </Link>\n  <MyButtonGrid onClick={() => handleAddToCart(data)}>Add to cart</MyButtonGrid>\n</Wrapper>\n)\n}\n\nexport default ProductDetails\n"]},"metadata":{},"sourceType":"module"}