{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState } from \"react\";\nimport { BasketContext } from \"./BasketContext\";\nexport const getBasket = async () => await (await fetch('http://localhost:3000/customers/1/basketDetails')).json();\nexport const getProducts = async () => await (await fetch('http://localhost:3000/products/info')).json();\nexport const ProductList = () => {\n  _s();\n\n  const [cartItemss, setCartItems] = useState([]);\n  React.useEffect(() => {\n    fetch('http://localhost:3000/customers/1/basketDetails').then(response => response.json()).then(cartItemss => {\n      setCartItems(cartItemss);\n    });\n  }, [cartItemss]);\n  return setCartItems;\n};\n\n_s(ProductList, \"lCthNGXZCEoXp0k3PYtFtXyAjHw=\");\n\n_c = ProductList;\nexport async function HandleAddToCart(clickedItem) {\n  _s2();\n\n  try {\n    const addCartItems = React.useContext(BasketContext);\n    /* const [cartItems, setCartItems] = React.useContext(BasketContext) */\n\n    const isItemInCart = (await getBasket()).some(item => item.productId === clickedItem.productId);\n\n    if (isItemInCart) {\n      const response = await fetch(\"http://localhost:3000/customers/1/basket/\" + clickedItem.productId + \"/1\", {\n        method: \"PUT\",\n        headers: {\n          \"Content-type\": \"application/json; charset=UTF-8\"\n        }\n      });\n      return;\n    }\n\n    const response = await fetch(\"http://localhost:3000/customers/1/basket\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        productId: clickedItem.productId,\n        quantity: 1\n      }),\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\"\n      }\n    });\n  } catch (err) {\n    alert(\"Something Went Wrong\");\n    console.log(err);\n  }\n}\n\n_s2(HandleAddToCart, \"Dk3VFc93Kx4n6XI26JMwu/IJ2jA=\");\n\n_c2 = HandleAddToCart;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ProductList\");\n$RefreshReg$(_c2, \"HandleAddToCart\");","map":{"version":3,"sources":["/Users/emmateglbraender/Documents/ITU/2semester/Frameworks and Architectures for the Web/Mini projects/Mini project 3/hot_liquids/src/Components/addToBasket.tsx"],"names":["React","useState","BasketContext","getBasket","fetch","json","getProducts","ProductList","cartItemss","setCartItems","useEffect","then","response","HandleAddToCart","clickedItem","addCartItems","useContext","isItemInCart","some","item","productId","method","headers","body","JSON","stringify","quantity","err","alert","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AAGA,SAASC,aAAT,QAA8B,iBAA9B;AAGA,OAAO,MAAMC,SAAS,GAAG,YACzB,MAAM,CAAC,MAAMC,KAAK,CAAC,iDAAD,CAAZ,EAAiEC,IAAjE,EADC;AAGP,OAAO,MAAMC,WAAW,GAAG,YAC3B,MAAM,CAAC,MAAMF,KAAK,CAAC,qCAAD,CAAZ,EAAqDC,IAArD,EADC;AAGP,OAAO,MAAME,WAAW,GAAG,MAAM;AAAA;;AAC7B,QAAM,CAACC,UAAD,EAAaC,YAAb,IAA6BR,QAAQ,CAAC,EAAD,CAA3C;AACAD,EAAAA,KAAK,CAACU,SAAN,CAAgB,MAAM;AACpBN,IAAAA,KAAK,CAAC,iDAAD,CAAL,CACGO,IADH,CACSC,QAAD,IAAcA,QAAQ,CAACP,IAAT,EADtB,EAEGM,IAFH,CAESH,UAAD,IAAgB;AACpBC,MAAAA,YAAY,CAACD,UAAD,CAAZ;AACD,KAJH;AAKD,GAND,EAMG,CAACA,UAAD,CANH;AAQA,SAAOC,YAAP;AAEH,CAZM;;GAAMF,W;;KAAAA,W;AAcb,OAAO,eAAeM,eAAf,CAA+BC,WAA/B,EAA0D;AAAA;;AAC7D,MAAI;AACA,UAAMC,YAAY,GAAGf,KAAK,CAACgB,UAAN,CAAiBd,aAAjB,CAArB;AACI;;AACA,UAAMe,YAAY,GAAG,CAAC,MAAMd,SAAS,EAAhB,EAAoBe,IAApB,CAAyBC,IAAI,IAAIA,IAAI,CAACC,SAAL,KAAmBN,WAAW,CAACM,SAAhE,CAArB;;AACA,QAAIH,YAAJ,EAAkB;AAChB,YAAML,QAAQ,GAAG,MAAMR,KAAK,CAAC,8CAA8CU,WAAW,CAACM,SAA1D,GAAsE,IAAvE,EAA6E;AACvGC,QAAAA,MAAM,EAAE,KAD+F;AAEvGC,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT;AAF8F,OAA7E,CAA5B;AAMA;AACD;;AACD,UAAMV,QAAQ,GAAG,MAAMR,KAAK,CAAC,0CAAD,EAA6C;AACvEiB,MAAAA,MAAM,EAAE,MAD+D;AAEvEE,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBL,QAAAA,SAAS,EAAEN,WAAW,CAACM,SADJ;AAEnBM,QAAAA,QAAQ,EAAE;AAFS,OAAf,CAFiE;AAMvEJ,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAN8D,KAA7C,CAA5B;AAUP,GAvBD,CAuBE,OAAOK,GAAP,EAAY;AACZC,IAAAA,KAAK,CAAC,sBAAD,CAAL;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACD;AACF;;IA5BmBd,e;;MAAAA,e","sourcesContent":["import React from \"react\";\nimport { useState } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { CartItemType } from \"./allproducts\";\nimport { BasketContext } from \"./BasketContext\";\nimport { Fetch } from \"./Fetch\";\n\nexport const getBasket = async (): Promise<CartItemType[]> =>\nawait (await fetch('http://localhost:3000/customers/1/basketDetails')).json();\n\nexport const getProducts = async (): Promise<CartItemType[]> =>\nawait (await fetch('http://localhost:3000/products/info')).json();\n\nexport const ProductList = () => {\n    const [cartItemss, setCartItems] = useState([] as CartItemType[]);\n    React.useEffect(() => {\n      fetch('http://localhost:3000/customers/1/basketDetails')\n        .then((response) => response.json())\n        .then((cartItemss) => {\n          setCartItems(cartItemss);\n        })\n    }, [cartItemss]);\n\n    return setCartItems\n\n}\n\nexport async function HandleAddToCart(clickedItem: CartItemType) {\n    try {\n        const addCartItems = React.useContext(BasketContext);\n            /* const [cartItems, setCartItems] = React.useContext(BasketContext) */\n            const isItemInCart = (await getBasket()).some(item => item.productId === clickedItem.productId); \n            if (isItemInCart) {\n              const response = await fetch(\"http://localhost:3000/customers/1/basket/\" + clickedItem.productId + \"/1\", {\n                method: \"PUT\",\n                headers: {\n                  \"Content-type\": \"application/json; charset=UTF-8\",\n                },\n              });\n              return\n            } \n            const response = await fetch(\"http://localhost:3000/customers/1/basket\", {\n              method: \"POST\",\n              body: JSON.stringify({\n                productId: clickedItem.productId,\n                quantity: 1,\n              }),\n              headers: {\n                \"Content-type\": \"application/json; charset=UTF-8\",\n              },\n            });\n    } catch (err) {\n      alert(\"Something Went Wrong\");\n      console.log(err);\n    }\n  }\n\n\n"]},"metadata":{},"sourceType":"module"}