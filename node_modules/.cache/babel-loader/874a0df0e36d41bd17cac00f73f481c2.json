{"ast":null,"code":"var _jsxFileName = \"/Users/emmateglbraender/Documents/ITU/2semester/Frameworks and Architectures for the Web/Mini projects/Mini project 3/hot_liquids/src/Components/allproducts.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { useQuery } from 'react-query'; // Components\n\nimport Item from '../Item/Item';\nimport Cart from '../Cart/Cart';\nimport Drawer from '@material-ui/core/Drawer';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Grid from '@material-ui/core/Grid';\nimport AddShoppingCartIcon from '@material-ui/icons/AddShoppingCart';\nimport Badge from '@material-ui/core/Badge'; // Styles\n\nimport { Wrapper, StyledButton } from '../App.styles';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getProducts = async () => await (await fetch('http://localhost:3000/products/info')).json();\n\nconst getBasket = async () => await (await fetch('http://localhost:3000/customers/1/basketDetails')).json();\n/* const getBasket = async () => { */\n\n/*   const res = await fetch(\"http://localhost:3000/customers/1/basket\"); */\n\n/*   return res.json(); */\n\n/* }; */\n\n\nconst ProductList = () => {\n  _s();\n\n  const [cartOpen, setCartOpen] = useState(false);\n  /* const [cartItems, setCartItems] = useState([] as CartItemType[]); */\n\n  /* const [cartItems, setCartItems] = useState([] as CartItemType[]); */\n\n  /* const getBasket = async () => { */\n\n  /*   fetch('ttp://localhost:3000/customers/1/basket') */\n\n  /*     .then(response => response.json()) */\n\n  /*     .then(json => { */\n\n  /*       setCartItems({ cartItems: json }); */\n\n  /*     }); */\n\n  /* } */\n\n  /* const [state, setState] = useState([]) */\n\n  /* useEffect(() => { */\n\n  /*     fetch(\"/api/data\") */\n\n  /*     .then( */\n\n  /*         res => setState(res.data) */\n\n  /*     ) */\n\n  /* }) */\n\n  const [cartItems, setCartItems] = useState([]);\n  React.useEffect(() => {\n    fetch('http://localhost:3000/customers/1/basketDetails').then(response => response.json()).then(cartItems => {\n      setCartItems(cartItems);\n    });\n  }, []);\n  const {\n    data,\n    isLoading,\n    error\n  } = useQuery('products', getProducts);\n  console.log(data);\n\n  const getTotalItems = items => items.reduce((ack, item) => ack + item.quantity, 0);\n  /* async function handleAddToCart(clickedItem: CartItemType) { */\n\n  /*   try { */\n\n  /*     const response = await fetch(\"http://localhost:3000/customers/1/basket\", { */\n\n  /*       method: \"POST\", */\n\n  /*       body: JSON.stringify({ */\n\n  /*         productId: clickedItem.productId, */\n\n  /*         quantity: 1, */\n\n  /*       }), */\n\n  /*       headers: { */\n\n  /*         \"Content-type\": \"application/json; charset=UTF-8\", */\n\n  /*       }, */\n\n  /*     }); */\n\n  /*     let data = await response.json(); */\n\n  /*     alert(\"Item Added To Cart\"); */\n\n  /*      setCartItems((prev) => [...prev, clickedItem]) */\n\n  /*      console.log(data) */\n\n  /*   } catch (err) { */\n\n  /*     alert(\"Something Went Wrong\"); */\n\n  /*     console.log(err); */\n\n  /*   } */\n\n  /* } */\n\n\n  async function handleAddToCart(clickedItem) {\n    try {\n      const isItemInCart = (await getBasket()).some(item => item.productId === clickedItem.productId);\n\n      if (isItemInCart) {\n        const response = await fetch(\"http://localhost:3000/customers/1/basket/\" + clickedItem.productId + \"/1\", {\n          method: \"PUT\",\n          headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\"\n          }\n        });\n        return;\n        /* return cartItems.map(item => */\n\n        /*   item.productId === clickedItem.productId */\n\n        /*     ? { ...item, quantity: item.quantity + 1 } */\n\n        /*     : item, */\n\n        /* );  */\n      }\n\n      const response = await fetch(\"http://localhost:3000/customers/1/basket\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          productId: clickedItem.productId,\n          quantity: 1\n        }),\n        headers: {\n          \"Content-type\": \"application/json; charset=UTF-8\"\n        }\n      });\n      let data = await response.json();\n      alert(\"Item Added To Cart\");\n      setCartItems(prev => [...prev, clickedItem]);\n      console.log(data);\n    } catch (err) {\n      alert(\"Something Went Wrong\");\n      console.log(err);\n    }\n  }\n  /* const handleAddToCarta = (clickedItem: CartItemType) => { */\n\n  /*   setCartItems(prev => { */\n\n  /*     // 1. Is the item already added in the cart? */\n\n  /*     const isItemInCart = prev.find(item => item.productId === clickedItem.productId); */\n\n  /*     if (isItemInCart) { */\n\n  /*       return prev.map(item => */\n\n  /*         item.productId === clickedItem.productId */\n\n  /*           ? { ...item, quantity: item.quantity + 1 } */\n\n  /*           : item, */\n\n  /*           console.log(\"hello\") */\n\n  /*       ); */\n\n  /*     } */\n\n  /*      */\n\n  /*     // First time the item is added */\n\n  /*     console.log(\"hello1\") */\n\n  /*     return [...prev, { ...clickedItem, quantity: 1 }]; */\n\n  /*   }); */\n\n  /* }; */\n\n  /* async function handleRemoveFrom(id: number) { */\n\n  /*   try { */\n\n  /*     const response = await fetch(\"hhttp://localhost:3000/customers/1/basket/\", { */\n\n  /*       method: \"DELETE\", */\n\n  /*       body: JSON.stringify({ */\n\n  /*         productId: id, */\n\n  /*         quantity: 1, */\n\n  /*       }), */\n\n  /*       headers: { */\n\n  /*         \"Content-type\": \"application/json; charset=UTF-8\", */\n\n  /*       }, */\n\n  /*     }); */\n\n  /*     let data = await response.json(); */\n\n  /*     alert(\"Item Added To Cart\"); */\n\n  /*   } catch (err) { */\n\n  /*     alert(\"Something Went Wrong\"); */\n\n  /*     console.log(err); */\n\n  /*   } */\n\n  /* } */\n\n\n  const handleRemoveFromCart = id => {\n    setCartItems(prev => prev.reduce((ack, item) => {\n      if (item.productId === id) {\n        if (item.quantity === 1) return ack;\n        return [...ack, { ...item,\n          quantity: item.quantity - 1\n        }];\n      } else {\n        return [...ack, item];\n      }\n    }, []));\n  };\n\n  if (isLoading) return /*#__PURE__*/_jsxDEV(LinearProgress, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Something went wrong ...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: [/*#__PURE__*/_jsxDEV(Drawer, {\n      anchor: \"right\",\n      open: cartOpen,\n      onClose: () => setCartOpen(false),\n      children: /*#__PURE__*/_jsxDEV(Cart, {\n        cartItems: cartItems,\n        addToCart: handleAddToCart,\n        removeFromCart: handleRemoveFromCart\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StyledButton, {\n      onClick: () => setCartOpen(true),\n      children: /*#__PURE__*/_jsxDEV(Badge, {\n        badgeContent: getTotalItems(cartItems),\n        color: \"error\",\n        children: /*#__PURE__*/_jsxDEV(AddShoppingCartIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: data === null || data === void 0 ? void 0 : data.map(item => /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 4,\n        children: /*#__PURE__*/_jsxDEV(Item, {\n          item: item,\n          handleAddToCart: handleAddToCart\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 13\n        }, this)\n      }, item.productId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 198,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ProductList, \"0w91RC/b2bt6is9d6/OM27JEvxY=\", false, function () {\n  return [useQuery];\n});\n\n_c = ProductList;\nexport default ProductList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductList\");","map":{"version":3,"sources":["/Users/emmateglbraender/Documents/ITU/2semester/Frameworks and Architectures for the Web/Mini projects/Mini project 3/hot_liquids/src/Components/allproducts.tsx"],"names":["useState","useQuery","Item","Cart","Drawer","LinearProgress","Grid","AddShoppingCartIcon","Badge","Wrapper","StyledButton","React","getProducts","fetch","json","getBasket","ProductList","cartOpen","setCartOpen","cartItems","setCartItems","useEffect","then","response","data","isLoading","error","console","log","getTotalItems","items","reduce","ack","item","quantity","handleAddToCart","clickedItem","isItemInCart","some","productId","method","headers","body","JSON","stringify","alert","prev","err","handleRemoveFromCart","id","map"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport { QueryKey, useQuery, UseQueryOptions } from 'react-query';\n// Components\nimport Item from '../Item/Item';\nimport Cart from '../Cart/Cart';\nimport Drawer from '@material-ui/core/Drawer';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Grid from '@material-ui/core/Grid';\nimport AddShoppingCartIcon from '@material-ui/icons/AddShoppingCart';\nimport Badge from '@material-ui/core/Badge';\n// Styles\nimport { Wrapper, StyledButton } from '../App.styles';\nimport { useEffect } from 'react';\nimport React from 'react';\nimport { kStringMaxLength } from 'node:buffer';\n\n// Types\nexport type CartItemType = {\n  productId: number;\n  category: string;\n  description: string;\n  img_path: string;\n  price: number;\n  name: string;\n  quantity: number;\n};\n\nconst getProducts = async (): Promise<CartItemType[]> =>\n  await (await fetch('http://localhost:3000/products/info')).json();\n\n  const getBasket = async (): Promise<CartItemType[]> =>\n  await (await fetch('http://localhost:3000/customers/1/basketDetails')).json();\n\n\n  /* const getBasket = async () => { */\n  /*   const res = await fetch(\"http://localhost:3000/customers/1/basket\"); */\n  /*   return res.json(); */\n  /* }; */\n\n\nconst ProductList = () => {\n\n  const [cartOpen, setCartOpen] = useState(false);\n/* const [cartItems, setCartItems] = useState([] as CartItemType[]); */\n/* const [cartItems, setCartItems] = useState([] as CartItemType[]); */\n\n/* const getBasket = async () => { */\n/*   fetch('ttp://localhost:3000/customers/1/basket') */\n/*     .then(response => response.json()) */\n/*     .then(json => { */\n/*       setCartItems({ cartItems: json }); */\n/*     }); */\n/* } */\n/* const [state, setState] = useState([]) */\n/* useEffect(() => { */\n/*     fetch(\"/api/data\") */\n/*     .then( */\n/*         res => setState(res.data) */\n/*     ) */\n/* }) */\n\nconst [cartItems, setCartItems] = useState([] as CartItemType[]);\nReact.useEffect(() => {\n  fetch('http://localhost:3000/customers/1/basketDetails')\n    .then((response) => response.json())\n    .then((cartItems) => {\n      setCartItems(cartItems);\n    })\n}, []);\n\n  const { data, isLoading, error } = useQuery<CartItemType[]>(\n    'products',\n    getProducts\n  );\n  console.log(data);\n\n  const getTotalItems = (items: CartItemType[]) =>\n    items.reduce((ack: number, item) => ack + item.quantity, 0);\n\n    /* async function handleAddToCart(clickedItem: CartItemType) { */\n    /*   try { */\n    /*     const response = await fetch(\"http://localhost:3000/customers/1/basket\", { */\n    /*       method: \"POST\", */\n    /*       body: JSON.stringify({ */\n    /*         productId: clickedItem.productId, */\n    /*         quantity: 1, */\n    /*       }), */\n    /*       headers: { */\n    /*         \"Content-type\": \"application/json; charset=UTF-8\", */\n    /*       }, */\n    /*     }); */\n    /*     let data = await response.json(); */\n    /*     alert(\"Item Added To Cart\"); */\n    /*      setCartItems((prev) => [...prev, clickedItem]) */\n    /*      console.log(data) */\n    /*   } catch (err) { */\n    /*     alert(\"Something Went Wrong\"); */\n    /*     console.log(err); */\n    /*   } */\n    /* } */\n\n    async function handleAddToCart(clickedItem: CartItemType) {\n      try {\n        const isItemInCart = (await getBasket()).some(item => item.productId === clickedItem.productId); \n        if (isItemInCart) {\n          const response = await fetch(\"http://localhost:3000/customers/1/basket/\" + clickedItem.productId + \"/1\", {\n            method: \"PUT\",\n            headers: {\n              \"Content-type\": \"application/json; charset=UTF-8\",\n            },\n          });\n          return\n          /* return cartItems.map(item => */\n          /*   item.productId === clickedItem.productId */\n          /*     ? { ...item, quantity: item.quantity + 1 } */\n          /*     : item, */\n          /* );  */\n        } \n        const response = await fetch(\"http://localhost:3000/customers/1/basket\", {\n          method: \"POST\",\n          body: JSON.stringify({\n            productId: clickedItem.productId,\n            quantity: 1,\n          }),\n          headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n          },\n        });\n        let data = await response.json();\n        alert(\"Item Added To Cart\");\n         setCartItems((prev) => [...prev, clickedItem])\n         console.log(data)\n      } catch (err) {\n        alert(\"Something Went Wrong\");\n        console.log(err);\n      }\n    }\n\n\n  /* const handleAddToCarta = (clickedItem: CartItemType) => { */\n  /*   setCartItems(prev => { */\n  /*     // 1. Is the item already added in the cart? */\n  /*     const isItemInCart = prev.find(item => item.productId === clickedItem.productId); */\n\n  /*     if (isItemInCart) { */\n  /*       return prev.map(item => */\n  /*         item.productId === clickedItem.productId */\n  /*           ? { ...item, quantity: item.quantity + 1 } */\n  /*           : item, */\n  /*           console.log(\"hello\") */\n  /*       ); */\n  /*     } */\n  /*      */\n  /*     // First time the item is added */\n  /*     console.log(\"hello1\") */\n  /*     return [...prev, { ...clickedItem, quantity: 1 }]; */\n  /*   }); */\n  /* }; */\n\n  /* async function handleRemoveFrom(id: number) { */\n  /*   try { */\n  /*     const response = await fetch(\"hhttp://localhost:3000/customers/1/basket/\", { */\n  /*       method: \"DELETE\", */\n  /*       body: JSON.stringify({ */\n  /*         productId: id, */\n  /*         quantity: 1, */\n  /*       }), */\n  /*       headers: { */\n  /*         \"Content-type\": \"application/json; charset=UTF-8\", */\n  /*       }, */\n  /*     }); */\n  /*     let data = await response.json(); */\n  /*     alert(\"Item Added To Cart\"); */\n  /*   } catch (err) { */\n  /*     alert(\"Something Went Wrong\"); */\n  /*     console.log(err); */\n  /*   } */\n  /* } */\n\n  const handleRemoveFromCart = (id: number) => {\n    setCartItems(prev =>\n      prev.reduce((ack, item) => {\n        if (item.productId === id) {\n          if (item.quantity === 1) return ack;\n          return [...ack, { ...item, quantity: item.quantity - 1 }];\n        } else {\n          return [...ack, item];\n        }\n      }, [] as CartItemType[])\n    );\n  };\n\n  if (isLoading) return <LinearProgress />;\n  if (error) return <div>Something went wrong ...</div>;\n\n  return (\n    \n    <Wrapper>\n      <Drawer anchor='right' open={cartOpen} onClose={() => setCartOpen(false)}>\n        <Cart\n          cartItems={cartItems}\n          addToCart={handleAddToCart}\n          removeFromCart={handleRemoveFromCart}\n        />\n      </Drawer>\n      <StyledButton onClick={() => setCartOpen(true)}>\n        <Badge badgeContent={getTotalItems(cartItems)} color='error'>\n          <AddShoppingCartIcon />\n        </Badge>\n      </StyledButton>\n      <Grid container spacing={3}>\n        {data?.map(item => (\n          <Grid item key={item.productId} xs={12} sm={4}>\n            <Item item={item} handleAddToCart={handleAddToCart} />\n          </Grid>\n        ))}\n      </Grid>\n    </Wrapper>\n  );\n};\n\nexport default ProductList;\n"]},"metadata":{},"sourceType":"module"}