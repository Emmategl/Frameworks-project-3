{"ast":null,"code":"","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["import React from \"react\";\n\n/* export interface Name {\n    firstName: string,\n}\n\nexport interface ILoginContext {\n    firstName: Name;\n    setName: (firstName:string) => void\n}\n\nexport const NameContext = React.createContext<ILoginContext | undefined>(undefined)\n\nexport const init = {\n    firstName: \"\",\n  }\n\ntype Props = {children: React.ReactNode};\n\nexport function useName(){\n    return useContext(NameContext)\n} */\n\n/* export const NameProvider = ({children}: Props) => {\nconst [name, setName] = useState<Name>(init)\nconst setNameFun = (firstName: string) => {\n    setName((prev) => ({...prev, ...{firstname:firstName}})) \n  }\n\nreturn (\n    <NameContext.Provider value={{firstName:name, setName:setNameFun}}>\n    {children}\n    </NameContext.Provider>\n)\n\n}\n\nfunction useContext(NameContext: React.Context<ILoginContext | undefined>) {\n    throw new Error(\"Function not implemented.\");\n}\n\nfunction useState<T>(init: { firstName: string; }): [any, any] {\n    throw new Error(\"Function not implemented.\");\n}\n\n */"]},"metadata":{},"sourceType":"module"}