{"ast":null,"code":"var _jsxFileName = \"/Users/emmateglbraender/Documents/ITU/2semester/Frameworks and Architectures for the Web/Mini projects/Mini project 3/hot_liquids/src/Components/prodDetails.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { Wrapper } from \"../App.styles\";\n\n/* import handleAddToCart from \"./allproducts\"; */\nimport Grid from \"@material-ui/core/Grid\";\nimport Item from '../Item/Item';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst init = {\n  productId: 0,\n  category: \"no\",\n  description: \"No product with this id\",\n  img_path: \"no\",\n  price: 0,\n  name: \"No product with this id\",\n  quantity: 0,\n  longDescription: \"no\"\n};\n\nconst getProducts = async () => await (await fetch('http://localhost:3000/products/info')).json();\n\nexport const getBasket = async () => await (await fetch('http://localhost:3000/customers/1/basketDetails')).json();\n\nconst ProductDetails = ({\n  match\n}) => {\n  _s();\n\n  const [cartItemss, setCartItems] = useState([]);\n  React.useEffect(() => {\n    fetch('http://localhost:3000/customers/1/basketDetails').then(response => response.json()).then(cartItemss => {\n      setCartItems(cartItemss);\n    });\n  }, [cartItemss]);\n  const {\n    dat1a,\n    isLoading,\n    error\n  } = useQuery('products', getProducts);\n\n  async function handleAddToCart(clickedItem) {\n    try {\n      const isItemInCart = (await getBasket()).some(item => item.productId === clickedItem.productId);\n\n      if (isItemInCart) {\n        const response = await fetch(\"http://localhost:3000/customers/1/basket/\" + clickedItem.productId + \"/1\", {\n          method: \"PUT\",\n          headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\"\n          }\n        });\n        return;\n      }\n\n      const response = await fetch(\"http://localhost:3000/customers/1/basket\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          productId: clickedItem.productId,\n          quantity: 1\n        }),\n        headers: {\n          \"Content-type\": \"application/json; charset=UTF-8\"\n        }\n      });\n      let data = await response.json();\n      alert(\"Item Added To Cart\");\n      return setCartItems(prev => [...prev, clickedItem]);\n    } catch (err) {\n      alert(\"Something Went Wrong\");\n      console.log(err);\n    }\n  }\n\n  const getProduct = async () => await (await fetch('http://localhost:3000/products/' + match.params.productId)).json();\n\n  const {\n    data\n  } = useQuery('product', getProduct);\n  let validated;\n\n  if (data === undefined) {\n    validated = init;\n  } else {\n    validated = data;\n  }\n\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: data === null || data === void 0 ? void 0 : data.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 3,\n        children: /*#__PURE__*/_jsxDEV(Item, {\n          item: validated,\n          handleAddToCart: handleAddToCart\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 9\n        }, this)\n      }, data === null || data === void 0 ? void 0 : data.productId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 1\n  }, this);\n};\n\n_s(ProductDetails, \"8lyDYSvNqy1LAV9kQijDehEFVgI=\", false, function () {\n  return [useQuery, useQuery];\n});\n\n_c = ProductDetails;\nexport default ProductDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductDetails\");","map":{"version":3,"sources":["/Users/emmateglbraender/Documents/ITU/2semester/Frameworks and Architectures for the Web/Mini projects/Mini project 3/hot_liquids/src/Components/prodDetails.tsx"],"names":["React","useState","useQuery","Wrapper","Grid","Item","init","productId","category","description","img_path","price","name","quantity","longDescription","getProducts","fetch","json","getBasket","ProductDetails","match","cartItemss","setCartItems","useEffect","then","response","dat1a","isLoading","error","handleAddToCart","clickedItem","isItemInCart","some","item","method","headers","body","JSON","stringify","data","alert","prev","err","console","log","getProduct","params","validated","undefined"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter, Link, match, NavLink, Route, Switch, useParams } from 'react-router-dom';\nimport { useQuery } from \"react-query\";\nimport { Wrapper } from \"../App.styles\";\nimport { MyButtonGrid } from \"../App\";\n/* import handleAddToCart from \"./allproducts\"; */\nimport Grid from \"@material-ui/core/Grid\";\nimport Item from '../Item/Item';\n\nexport type CartItemType = {\n    productId: number;\n    category: string;\n    description: string;\n    img_path: string;\n    price: number;\n    name: string;\n    quantity: number;\n    longDescription: string;\n  };\n\nconst init ={\n  productId: 0,\n  category: \"no\",\n  description: \"No product with this id\",\n  img_path: \"no\",\n  price: 0,\n  name: \"No product with this id\",\n  quantity: 0,\n  longDescription: \"no\",\n}\n\n\nconst getProducts = async (): Promise<CartItemType[]> =>\n  await (await fetch('http://localhost:3000/products/info')).json();\n\n  export const getBasket = async (): Promise<CartItemType[]> =>\n  await (await fetch('http://localhost:3000/customers/1/basketDetails')).json();\n\nconst ProductDetails = ({match}: {match: any}) => {\n\n  const [cartItemss, setCartItems] = useState([] as CartItemType[]);\n  React.useEffect(() => {\n    fetch('http://localhost:3000/customers/1/basketDetails')\n      .then((response) => response.json())\n      .then((cartItemss) => {\n        setCartItems(cartItemss);\n      })\n  }, [cartItemss]);\n  \n    const { dat1a, isLoading, error } = useQuery<CartItemType[]>(\n      'products',\n      getProducts\n    );\n  \n      async function handleAddToCart(clickedItem: CartItemType) {\n        try {\n          const isItemInCart = (await getBasket()).some(item => item.productId === clickedItem.productId); \n          if (isItemInCart) {\n            const response = await fetch(\"http://localhost:3000/customers/1/basket/\" + clickedItem.productId + \"/1\", {\n              method: \"PUT\",\n              headers: {\n                \"Content-type\": \"application/json; charset=UTF-8\",\n              },\n            });\n            return\n          } \n          const response = await fetch(\"http://localhost:3000/customers/1/basket\", {\n            method: \"POST\",\n            body: JSON.stringify({\n              productId: clickedItem.productId,\n              quantity: 1,\n            }),\n            headers: {\n              \"Content-type\": \"application/json; charset=UTF-8\",\n            },\n          });\n          let data = await response.json();\n          alert(\"Item Added To Cart\");\n          return setCartItems((prev) => [...prev, clickedItem])\n        } catch (err) {\n          alert(\"Something Went Wrong\");\n          console.log(err);\n        }\n      }\n\n\n\n      const getProduct = async (): Promise<CartItemType> =>\n      await (await fetch('http://localhost:3000/products/'+ match.params.productId)).json(); \n      const {data} = useQuery<CartItemType>(\n        'product',\n        getProduct\n      );\n\n      let validated: CartItemType;\n      if(data === undefined)\n      {validated = init;}\n      else{\n      validated = data;\n      }\n\nreturn (\n\n<Wrapper>\n<h3>{data?.name}</h3>\n  <Grid container spacing={3}>\n      <Grid item key={data?.productId} xs={12} sm={3}>\n        <Item item={validated} handleAddToCart={handleAddToCart} />\n      </Grid>\n  </Grid>\n</Wrapper>\n)}\nexport default ProductDetails\n"]},"metadata":{},"sourceType":"module"}