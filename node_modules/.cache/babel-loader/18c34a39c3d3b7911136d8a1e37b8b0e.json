{"ast":null,"code":"var _jsxFileName = \"/Users/emmateglbraender/Documents/ITU/2semester/Frameworks and Architectures for the Web/Mini projects/Mini project 3/hot_liquids/src/Components/stack.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useQuery } from \"react-query\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProductDetails = ({\n  match\n}) => {\n  _s();\n\n  const getProduct = async () => await (await fetch('http://localhost:3000/products/' + match.params.productId)).json();\n\n  const {\n    data\n  } = useQuery('product', getProduct);\n\n  if (data) {\n    /* console.log(data) */\n    //gives me the correct product based on URL\n    // {productId: 12, name: \"Green tea\", price: 40, img_path: \"Images/Teas/12.png\", description: \"Tasting notes: Cool mint, Ginger, Spices\"}\n    console.log(data.name); //gives error \"Property 'name' does not exist on type 'CartItemType[]\n\n    /* const product = data?.find((x) => x.productId === match.params.productId); */\n\n    /* console.log(product) */\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Product name: \", data.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 2\n      }, this), \" // gives error \\\"Object is possibly 'undefined' and\", /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Product ID: \", match.params.productId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 2\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 3\n    }, this);\n  }\n};\n\n_s(ProductDetails, \"wDefygpsWBVTl/fEL2emlq2/574=\", false, function () {\n  return [useQuery];\n});\n\n_c = ProductDetails;\nexport default ProductDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductDetails\");","map":{"version":3,"sources":["/Users/emmateglbraender/Documents/ITU/2semester/Frameworks and Architectures for the Web/Mini projects/Mini project 3/hot_liquids/src/Components/stack.tsx"],"names":["React","useQuery","ProductDetails","match","getProduct","fetch","params","productId","json","data","console","log","name"],"mappings":";;;AAAA,OAAOA,KAAP,MAA2C,OAA3C;AAEA,SAASC,QAAT,QAAyB,aAAzB;;;AAYA,MAAMC,cAAc,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAA2B;AAAA;;AAC5C,QAAMC,UAAU,GAAG,YACnB,MAAM,CAAC,MAAMC,KAAK,CAAC,oCAAmCF,KAAK,CAACG,MAAN,CAAaC,SAAjD,CAAZ,EAAyEC,IAAzE,EADN;;AAEA,QAAM;AAACC,IAAAA;AAAD,MAASR,QAAQ,CACrB,SADqB,EAErBG,UAFqB,CAAvB;;AAKA,MAAGK,IAAH,EAAQ;AACN;AAAwB;AACxB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACG,IAAjB,EAHM,CAGiB;;AAG3B;;AACA;;AAEJ,wBACE;AAAA,8BACD;AAAA,qCAAkBH,IAAI,CAACG,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA,cADC,uEAED;AAAA,mCAAgBT,KAAK,CAACG,MAAN,CAAaC,SAA7B;AAAA;AAAA;AAAA;AAAA;AAAA,cAFC;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAKE;AACD,CAvBD;;GAAML,c;UAGeD,Q;;;KAHfC,c;AAyBN,eAAeA,cAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter, Link, match, NavLink, Route, Switch, useParams } from 'react-router-dom';\nimport { useQuery } from \"react-query\";\n\nexport type CartItemType = {\n    productId: number;\n    category: string;\n    description: string;\n    img_path: string;\n    price: number;\n    name: string;\n    quantity: number;\n  };\n\nconst ProductDetails = ({match}: {match: any}) => {\n      const getProduct = async (): Promise<CartItemType> =>\n      await (await fetch('http://localhost:3000/products/'+ match.params.productId)).json(); \n      const {data} = useQuery<CartItemType>(\n        'product',\n        getProduct\n      );\n\n      if(data){\n        /* console.log(data) */ //gives me the correct product based on URL\n        // {productId: 12, name: \"Green tea\", price: 40, img_path: \"Images/Teas/12.png\", description: \"Tasting notes: Cool mint, Ginger, Spices\"}\n        console.log(data.name) //gives error \"Property 'name' does not exist on type 'CartItemType[]\n      \n\n    /* const product = data?.find((x) => x.productId === match.params.productId); */\n    /* console.log(product) */\n    \nreturn (\n  <div>\n <p>Product name: {data.name}</p> // gives error \"Object is possibly 'undefined' and \n <p>Product ID: {match.params.productId}</p> \n</div>\n)}\n}\n\nexport default ProductDetails\n"]},"metadata":{},"sourceType":"module"}