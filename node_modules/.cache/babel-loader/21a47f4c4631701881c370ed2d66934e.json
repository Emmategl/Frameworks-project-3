{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { BasketContext } from \"./BasketContext\";\nexport const getBasket = async () => await (await fetch('http://localhost:3000/customers/1/basketDetails')).json();\nexport const getProducts = async () => await (await fetch('http://localhost:3000/products/info')).json();\nexport async function HandleAddToCart(clickedItem) {\n  _s();\n\n  /* const [cartItemss, setCartItems] = useState([] as CartItemType[]);\n  React.useEffect(() => {\n    fetch('http://localhost:3000/customers/1/basketDetails')\n      .then((response) => response.json())\n      .then((cartItemss) => {\n        setCartItems(cartItemss);\n      })\n  }, [cartItemss]); */\n  try {\n    const [cartItems, setCartItems] = React.useContext(BasketContext);\n    React.useEffect(() => {\n      fetch('http://localhost:3000/customers/1/basketDetails').then(response => response.json()).then(cartItems => {\n        setCartItems(cartItems);\n      });\n    }, [cartItems]);\n    const isItemInCart = (await getBasket()).some(item => item.productId === clickedItem.productId);\n\n    if (isItemInCart) {\n      const response = await fetch(\"http://localhost:3000/customers/1/basket/\" + clickedItem.productId + \"/1\", {\n        method: \"PUT\",\n        headers: {\n          \"Content-type\": \"application/json; charset=UTF-8\"\n        }\n      });\n      return;\n    }\n\n    const response = await fetch(\"http://localhost:3000/customers/1/basket\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        productId: clickedItem.productId,\n        quantity: 1\n      }),\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\"\n      }\n    });\n    let data = await response.json();\n    alert(\"Item Added To Cart\");\n    setCartItems(prev => [...prev, clickedItem]);\n  } catch (err) {\n    alert(\"Something Went Wrong\");\n    console.log(err);\n  }\n}\n\n_s(HandleAddToCart, \"ehcz6zM3MfmTr0FU5Qyk0JtiqDs=\");\n\n_c = HandleAddToCart;\n\nvar _c;\n\n$RefreshReg$(_c, \"HandleAddToCart\");","map":{"version":3,"sources":["/Users/emmateglbraender/Documents/ITU/2semester/Frameworks and Architectures for the Web/Mini projects/Mini project 3/hot_liquids/src/Components/addToBasket.tsx"],"names":["React","BasketContext","getBasket","fetch","json","getProducts","HandleAddToCart","clickedItem","cartItems","setCartItems","useContext","useEffect","then","response","isItemInCart","some","item","productId","method","headers","body","JSON","stringify","quantity","data","alert","prev","err","console","log"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAIA,SAASC,aAAT,QAA8B,iBAA9B;AAEA,OAAO,MAAMC,SAAS,GAAG,YACzB,MAAM,CAAC,MAAMC,KAAK,CAAC,iDAAD,CAAZ,EAAiEC,IAAjE,EADC;AAGP,OAAO,MAAMC,WAAW,GAAG,YAC3B,MAAM,CAAC,MAAMF,KAAK,CAAC,qCAAD,CAAZ,EAAqDC,IAArD,EADC;AAIP,OAAO,eAAeE,eAAf,CAA+BC,WAA/B,EAA0D;AAAA;;AAG7D;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACI,MAAI;AACJ,UAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BT,KAAK,CAACU,UAAN,CAAiBT,aAAjB,CAAlC;AAEAD,IAAAA,KAAK,CAACW,SAAN,CAAgB,MAAM;AAClBR,MAAAA,KAAK,CAAC,iDAAD,CAAL,CACGS,IADH,CACSC,QAAD,IAAcA,QAAQ,CAACT,IAAT,EADtB,EAEGQ,IAFH,CAESJ,SAAD,IAAe;AACnBC,QAAAA,YAAY,CAACD,SAAD,CAAZ;AACD,OAJH;AAKD,KANH,EAMK,CAACA,SAAD,CANL;AASE,UAAMM,YAAY,GAAG,CAAC,MAAMZ,SAAS,EAAhB,EAAoBa,IAApB,CAAyBC,IAAI,IAAIA,IAAI,CAACC,SAAL,KAAmBV,WAAW,CAACU,SAAhE,CAArB;;AACA,QAAIH,YAAJ,EAAkB;AAChB,YAAMD,QAAQ,GAAG,MAAMV,KAAK,CAAC,8CAA8CI,WAAW,CAACU,SAA1D,GAAsE,IAAvE,EAA6E;AACvGC,QAAAA,MAAM,EAAE,KAD+F;AAEvGC,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT;AAF8F,OAA7E,CAA5B;AAMA;AACD;;AACD,UAAMN,QAAQ,GAAG,MAAMV,KAAK,CAAC,0CAAD,EAA6C;AACvEe,MAAAA,MAAM,EAAE,MAD+D;AAEvEE,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBL,QAAAA,SAAS,EAAEV,WAAW,CAACU,SADJ;AAEnBM,QAAAA,QAAQ,EAAE;AAFS,OAAf,CAFiE;AAMvEJ,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAN8D,KAA7C,CAA5B;AAUA,QAAIK,IAAI,GAAG,MAAMX,QAAQ,CAACT,IAAT,EAAjB;AACAqB,IAAAA,KAAK,CAAC,oBAAD,CAAL;AACAhB,IAAAA,YAAY,CAAEiB,IAAD,IAAU,CAAC,GAAGA,IAAJ,EAAUnB,WAAV,CAAX,CAAZ;AACD,GAnCD,CAmCE,OAAOoB,GAAP,EAAY;AACZF,IAAAA,KAAK,CAAC,sBAAD,CAAL;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF;;GAlDmBrB,e;;KAAAA,e","sourcesContent":["import React from \"react\";\nimport { useState } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { CartItemType } from \"./allproducts\";\nimport { BasketContext } from \"./BasketContext\";\n\nexport const getBasket = async (): Promise<CartItemType[]> =>\nawait (await fetch('http://localhost:3000/customers/1/basketDetails')).json();\n\nexport const getProducts = async (): Promise<CartItemType[]> =>\nawait (await fetch('http://localhost:3000/products/info')).json();\n\n\nexport async function HandleAddToCart(clickedItem: CartItemType) {\n\n\n    /* const [cartItemss, setCartItems] = useState([] as CartItemType[]);\n    React.useEffect(() => {\n      fetch('http://localhost:3000/customers/1/basketDetails')\n        .then((response) => response.json())\n        .then((cartItemss) => {\n          setCartItems(cartItemss);\n        })\n    }, [cartItemss]); */ \n    try {\n    const [cartItems, setCartItems] = React.useContext(BasketContext);\n\n    React.useEffect(() => {\n        fetch('http://localhost:3000/customers/1/basketDetails')\n          .then((response) => response.json())\n          .then((cartItems) => {\n            setCartItems(cartItems);\n          })\n      }, [cartItems]);\n    \n\n      const isItemInCart = (await getBasket()).some(item => item.productId === clickedItem.productId); \n      if (isItemInCart) {\n        const response = await fetch(\"http://localhost:3000/customers/1/basket/\" + clickedItem.productId + \"/1\", {\n          method: \"PUT\",\n          headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n          },\n        });\n        return\n      } \n      const response = await fetch(\"http://localhost:3000/customers/1/basket\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          productId: clickedItem.productId,\n          quantity: 1,\n        }),\n        headers: {\n          \"Content-type\": \"application/json; charset=UTF-8\",\n        },\n      });\n      let data = await response.json();\n      alert(\"Item Added To Cart\");\n      setCartItems((prev) => [...prev, clickedItem])\n    } catch (err) {\n      alert(\"Something Went Wrong\");\n      console.log(err);\n    }\n  }\n"]},"metadata":{},"sourceType":"module"}