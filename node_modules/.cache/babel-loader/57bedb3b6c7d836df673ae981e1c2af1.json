{"ast":null,"code":"export const getBasket = async () => await (await fetch('http://localhost:3000/customers/1/basketDetails')).json();\nexport const getProducts = async () => await (await fetch('http://localhost:3000/products/info')).json();\nexport async function Fetch(clickedItem) {\n  const isItemInCart = (await getBasket()).some(item => item.productId === clickedItem.productId);\n\n  if (isItemInCart) {\n    const response = await fetch(\"http://localhost:3000/customers/1/basket/\" + clickedItem.productId + \"/1\", {\n      method: \"PUT\",\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\"\n      }\n    });\n    return;\n  }\n\n  const response = await fetch(\"http://localhost:3000/customers/1/basket\", {\n    method: \"POST\",\n    body: JSON.stringify({\n      productId: clickedItem.productId,\n      quantity: 1\n    }),\n    headers: {\n      \"Content-type\": \"application/json; charset=UTF-8\"\n    }\n  });\n}\n_c = Fetch;\n\nvar _c;\n\n$RefreshReg$(_c, \"Fetch\");","map":{"version":3,"sources":["/Users/emmateglbraender/Documents/ITU/2semester/Frameworks and Architectures for the Web/Mini projects/Mini project 3/hot_liquids/src/Components/Fetch.tsx"],"names":["getBasket","fetch","json","getProducts","Fetch","clickedItem","isItemInCart","some","item","productId","response","method","headers","body","JSON","stringify","quantity"],"mappings":"AAEA,OAAO,MAAMA,SAAS,GAAG,YACzB,MAAM,CAAC,MAAMC,KAAK,CAAC,iDAAD,CAAZ,EAAiEC,IAAjE,EADC;AAGP,OAAO,MAAMC,WAAW,GAAG,YAC3B,MAAM,CAAC,MAAMF,KAAK,CAAC,qCAAD,CAAZ,EAAqDC,IAArD,EADC;AAGP,OAAO,eAAeE,KAAf,CAAqBC,WAArB,EAAgD;AAC7C,QAAMC,YAAY,GAAG,CAAC,MAAMN,SAAS,EAAhB,EAAoBO,IAApB,CAAyBC,IAAI,IAAIA,IAAI,CAACC,SAAL,KAAmBJ,WAAW,CAACI,SAAhE,CAArB;;AACA,MAAIH,YAAJ,EAAkB;AAChB,UAAMI,QAAQ,GAAG,MAAMT,KAAK,CAAC,8CAA8CI,WAAW,CAACI,SAA1D,GAAsE,IAAvE,EAA6E;AACvGE,MAAAA,MAAM,EAAE,KAD+F;AAEvGC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAF8F,KAA7E,CAA5B;AAMA;AACD;;AACD,QAAMF,QAAQ,GAAG,MAAMT,KAAK,CAAC,0CAAD,EAA6C;AACvEU,IAAAA,MAAM,EAAE,MAD+D;AAEvEE,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBN,MAAAA,SAAS,EAAEJ,WAAW,CAACI,SADJ;AAEnBO,MAAAA,QAAQ,EAAE;AAFS,KAAf,CAFiE;AAMvEJ,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AAN8D,GAA7C,CAA5B;AAUH;KArBeR,K","sourcesContent":["import { CartItemType } from \"./allproducts\";\n\nexport const getBasket = async (): Promise<CartItemType[]> =>\nawait (await fetch('http://localhost:3000/customers/1/basketDetails')).json();\n\nexport const getProducts = async (): Promise<CartItemType[]> =>\nawait (await fetch('http://localhost:3000/products/info')).json();\n\nexport async function Fetch(clickedItem: CartItemType) {\n          const isItemInCart = (await getBasket()).some(item => item.productId === clickedItem.productId); \n          if (isItemInCart) {\n            const response = await fetch(\"http://localhost:3000/customers/1/basket/\" + clickedItem.productId + \"/1\", {\n              method: \"PUT\",\n              headers: {\n                \"Content-type\": \"application/json; charset=UTF-8\",\n              },\n            });\n            return\n          } \n          const response = await fetch(\"http://localhost:3000/customers/1/basket\", {\n            method: \"POST\",\n            body: JSON.stringify({\n              productId: clickedItem.productId,\n              quantity: 1,\n            }),\n            headers: {\n              \"Content-type\": \"application/json; charset=UTF-8\",\n            },\n          });\n      }"]},"metadata":{},"sourceType":"module"}