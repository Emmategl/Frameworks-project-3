{"ast":null,"code":"var _jsxFileName = \"/Users/emmateglbraender/Documents/ITU/2semester/Frameworks and Architectures for the Web/Mini projects/Mini project 3/hot_liquids/src/Components/prodDetails.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useQuery } from \"react-query\";\nimport { Wrapper } from \"../App.styles\";\n\n/* import handleAddToCart from \"./allproducts\"; */\nimport Grid from \"@material-ui/core/Grid\";\nimport Item from '../Item/Item';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst init = {\n  productId: 0,\n  category: \"no\",\n  description: \"No product with this id\",\n  img_path: \"no\",\n  price: 0,\n  name: \"No product with this id\",\n  quantity: 0,\n  longDescription: \"no\"\n};\n\nasync function handleAddToCart(clickedItem) {\n  try {\n    const isItemInCart = (await getBasket()).some(item => item.productId === clickedItem.productId);\n\n    if (isItemInCart) {\n      const response = await fetch(\"http://localhost:3000/customers/1/basket/\" + clickedItem.productId + \"/1\", {\n        method: \"PUT\",\n        headers: {\n          \"Content-type\": \"application/json; charset=UTF-8\"\n        }\n      });\n      return;\n    }\n\n    const response = await fetch(\"http://localhost:3000/customers/1/basket\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        productId: clickedItem.productId,\n        quantity: 1\n      }),\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\"\n      }\n    });\n    let data = await response.json();\n    alert(\"Item Added To Cart\");\n    return setCartItems(prev => [...prev, clickedItem]);\n  } catch (err) {\n    alert(\"Something Went Wrong\");\n    console.log(err);\n  }\n}\n\nconst ProductDetails = ({\n  match\n}) => {\n  _s();\n\n  const getProduct = async () => await (await fetch('http://localhost:3000/products/' + match.params.productId)).json();\n\n  const {\n    data\n  } = useQuery('product', getProduct);\n  let validated;\n\n  if (data === undefined) {\n    validated = init;\n  } else {\n    validated = data;\n  }\n\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: data === null || data === void 0 ? void 0 : data.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 3,\n        children: /*#__PURE__*/_jsxDEV(Item, {\n          item: validated,\n          handleAddToCart: handleAddToCart\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 9\n        }, this)\n      }, data === null || data === void 0 ? void 0 : data.productId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 1\n  }, this);\n};\n\n_s(ProductDetails, \"wDefygpsWBVTl/fEL2emlq2/574=\", false, function () {\n  return [useQuery];\n});\n\n_c = ProductDetails;\nexport default ProductDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductDetails\");","map":{"version":3,"sources":["/Users/emmateglbraender/Documents/ITU/2semester/Frameworks and Architectures for the Web/Mini projects/Mini project 3/hot_liquids/src/Components/prodDetails.tsx"],"names":["React","useQuery","Wrapper","Grid","Item","init","productId","category","description","img_path","price","name","quantity","longDescription","handleAddToCart","clickedItem","isItemInCart","getBasket","some","item","response","fetch","method","headers","body","JSON","stringify","data","json","alert","setCartItems","prev","err","console","log","ProductDetails","match","getProduct","params","validated","undefined"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter, Link, match, NavLink, Route, Switch, useParams } from 'react-router-dom';\nimport { useQuery } from \"react-query\";\nimport { Wrapper } from \"../App.styles\";\nimport { MyButtonGrid } from \"../App\";\n/* import handleAddToCart from \"./allproducts\"; */\nimport Grid from \"@material-ui/core/Grid\";\nimport Item from '../Item/Item';\n\nexport type CartItemType = {\n    productId: number;\n    category: string;\n    description: string;\n    img_path: string;\n    price: number;\n    name: string;\n    quantity: number;\n    longDescription: string;\n  };\n\nconst init ={\n  productId: 0,\n  category: \"no\",\n  description: \"No product with this id\",\n  img_path: \"no\",\n  price: 0,\n  name: \"No product with this id\",\n  quantity: 0,\n  longDescription: \"no\",\n}\n\nasync function handleAddToCart(clickedItem: CartItemType) {\n  try {\n    const isItemInCart = (await getBasket()).some(item => item.productId === clickedItem.productId); \n    if (isItemInCart) {\n      const response = await fetch(\"http://localhost:3000/customers/1/basket/\" + clickedItem.productId + \"/1\", {\n        method: \"PUT\",\n        headers: {\n          \"Content-type\": \"application/json; charset=UTF-8\",\n        },\n      });\n      return\n    } \n    const response = await fetch(\"http://localhost:3000/customers/1/basket\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        productId: clickedItem.productId,\n        quantity: 1,\n      }),\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\",\n      },\n    });\n    let data = await response.json();\n    alert(\"Item Added To Cart\");\n    return setCartItems((prev) => [...prev, clickedItem])\n  } catch (err) {\n    alert(\"Something Went Wrong\");\n    console.log(err);\n  }\n}\n\nconst ProductDetails = ({match}: {match: any}) => {\n      const getProduct = async (): Promise<CartItemType> =>\n      await (await fetch('http://localhost:3000/products/'+ match.params.productId)).json(); \n      const {data} = useQuery<CartItemType>(\n        'product',\n        getProduct\n      );\n\n      let validated: CartItemType;\n      if(data === undefined)\n      {validated = init;}\n      else{\n      validated = data;\n      }\n\nreturn (\n\n<Wrapper>\n<h3>{data?.name}</h3>\n  <Grid container spacing={3}>\n      <Grid item key={data?.productId} xs={12} sm={3}>\n        <Item item={validated} handleAddToCart={handleAddToCart} />\n      </Grid>\n  </Grid>\n</Wrapper>\n)}\nexport default ProductDetails\n"]},"metadata":{},"sourceType":"module"}