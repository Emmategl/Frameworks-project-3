{"ast":null,"code":"var _jsxFileName = \"/Users/emmateglbraender/Documents/ITU/2semester/Frameworks and Architectures for the Web/Mini projects/Mini project 3/hot_liquids/src/Components/prod.tsx\",\n    _s = $RefreshSig$();\n\nimport Grid from \"@material-ui/core/Grid\";\nimport React from \"react\";\nimport { useQuery } from \"react-query\";\nimport { MyButtonGrid } from \"../App\";\nimport { Wrapper } from \"../Item/Item.styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Prod = ({\n  item,\n  handleAddToCart\n}) => {\n  _s();\n\n  const getProducts = async () => await (await fetch('http://localhost:3000/products/info')).json();\n\n  const getProduct = async () => await (await fetch('http://localhost:3000/products/2')).json();\n\n  const {\n    data,\n    isLoading,\n    error\n  } = useQuery('product', getProducts);\n  console.log(data);\n  console.log('product');\n  console.log(getProduct);\n\n  const ItemDes = ({\n    item,\n    handleAddToCart\n  }) => /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: item.img_path,\n      alt: item.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: item.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: item.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"$\", item.price]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MyButtonGrid, {\n      onClick: () => handleAddToCart(item),\n      children: \"Add to cart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"prdataduct-des\",\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: data === null || data === void 0 ? void 0 : data.map(item => /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 3,\n        children: [/*#__PURE__*/_jsxDEV(ItemDes, {\n          item: item,\n          handleAddToCart: handleAddToCart\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 20\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"fff\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 19\n        }, this)]\n      }, item.productId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 14\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 11\n  }, this);\n};\n/* console.log(d) */\n\n/* const [isLoading, setIsLoading] = useState(true); */\n\n/* const [data, setData] = useState([] as CartItemType[]); */\n\n/* useEffect(() => { */\n\n/*   fetch(`http://localhost:3000/products/2`) */\n\n/*     .then((res) => res.json()) */\n\n/*     .then((data) => { */\n\n/*       setData(data); */\n\n/*       setIsLoading(false); */\n\n/*       console.log(`http://localhost:3000/products/1`) */\n\n/*     }) */\n\n/*     .catch((error) => console.log(error)); */\n\n/* }, [data]); */\n\n/* const Prod = (productId: any) => { */\n\n/*   const [isLoading, setIsLoading] = useState(true); */\n\n/*   const [data, setData] = useState([] as CartItemType[]); */\n\n/*   useEffect(() => { */\n\n/*     fetch(`http://localhost:3000/products/${productId}`, {}) */\n\n/*       .then((res) => res.json()) */\n\n/*       .then((response) => { */\n\n/*         setData(response); */\n\n/*         setIsLoading(false); */\n\n/*         console.log(`http://localhost:3000/products/${productId}`) */\n\n/*       }) */\n\n/*       .catch((error) => console.log(error)); */\n\n/*   }, [productId]); */\n\n/*  */\n\n\n_s(Prod, \"RfG8gpBHsnG9psDyjbLfXsplOoo=\", false, function () {\n  return [useQuery];\n});\n\n_c = Prod;\nexport default Prod;\n\nvar _c;\n\n$RefreshReg$(_c, \"Prod\");","map":{"version":3,"sources":["/Users/emmateglbraender/Documents/ITU/2semester/Frameworks and Architectures for the Web/Mini projects/Mini project 3/hot_liquids/src/Components/prod.tsx"],"names":["Grid","React","useQuery","MyButtonGrid","Wrapper","Prod","item","handleAddToCart","getProducts","fetch","json","getProduct","data","isLoading","error","console","log","ItemDes","img_path","name","description","price","map","productId"],"mappings":";;;AAAA,OAAOA,IAAP,MAAiB,wBAAjB;AACA,OAAOC,KAAP,MAA2C,OAA3C;AACA,SAASC,QAAT,QAAyB,aAAzB;AAEA,SAASC,YAAT,QAA6B,QAA7B;AAEA,SAASC,OAAT,QAAwB,qBAAxB;;;AAuBE,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAA8B;AAAA;;AAEzC,QAAMC,WAAW,GAAG,YACtB,MAAM,CAAC,MAAMC,KAAK,CAAC,qCAAD,CAAZ,EAAqDC,IAArD,EADJ;;AAGF,QAAMC,UAAU,GAAG,YACnB,MAAM,CAAC,MAAMF,KAAK,CAAC,kCAAD,CAAZ,EAAkDC,IAAlD,EADN;;AAGA,QAAM;AAACE,IAAAA,IAAD;AAAOC,IAAAA,SAAP;AAAkBC,IAAAA;AAAlB,MAA4BZ,QAAQ,CACxC,SADwC,EAExCM,WAFwC,CAA1C;AAKAO,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYL,UAAZ;;AAEA,QAAMM,OAAwB,GAAG,CAAC;AAAEX,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAD,kBAC/B,QAAC,OAAD;AAAA,4BACE;AAAK,MAAA,GAAG,EAAED,IAAI,CAACY,QAAf;AAAyB,MAAA,GAAG,EAAEZ,IAAI,CAACa;AAAnC;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,8BACE;AAAA,kBAAKb,IAAI,CAACa;AAAV;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,kBAAIb,IAAI,CAACc;AAAT;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAA,wBAAMd,IAAI,CAACe,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAQE,QAAC,YAAD;AAAc,MAAA,OAAO,EAAE,MAAMd,eAAe,CAACD,IAAD,CAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AAaA,sBACQ;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,2BAEG,QAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,OAAO,EAAE,CAAzB;AAAA,gBACEM,IADF,aACEA,IADF,uBACEA,IAAI,CAAEU,GAAN,CAAUhB,IAAI,iBACb,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAgC,QAAA,EAAE,EAAE,EAApC;AAAwC,QAAA,EAAE,EAAE,CAA5C;AAAA,gCACG,QAAC,OAAD;AAAS,UAAA,IAAI,EAAEA,IAAf;AAAqB,UAAA,eAAe,EAAEC;AAAtC;AAAA;AAAA;AAAA;AAAA,gBADH,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA,SAAgBD,IAAI,CAACiB,SAArB;AAAA;AAAA;AAAA;AAAA,cADD;AADF;AAAA;AAAA;AAAA;AAAA;AAFH;AAAA;AAAA;AAAA;AAAA,UADR;AAeK,CA7CL;AA2DI;;AACN;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAKA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;GAzFQlB,I;UAQ4BH,Q;;;KAR5BG,I;AA4FR,eAAeA,IAAf","sourcesContent":["import Grid from \"@material-ui/core/Grid\";\nimport React, { useState, useEffect } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { Link, BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { MyButtonGrid } from \"../App\";\nimport Item from '../Item/Item';\nimport { Wrapper } from \"../Item/Item.styles\";\nimport handleAddToCart from './nav';\n/* import { CartItemType } from \"./allproducts\"; */\n\n/* const getProducts = async (): Promise<CartItemType[]> => */\n/*   await (await fetch('http://localhost:3000/products/info')).json(); */\n  \n  type CartItemType = {\n    productId: number;\n    category: string;\n    description: string;\n    img_path: string;\n    price: number;\n    name: string;\n    quantity: number;\n  };\n\n  type Props = {\n    item: CartItemType;\n    handleAddToCart: (clickedItem: CartItemType) => void;\n    /* getDetails: (clickedItem: CartItemType) => void; */\n  };\n\n  const Prod = ({ item, handleAddToCart}) => {\n\n    const getProducts = async (): Promise<CartItemType[]> =>\n  await (await fetch('http://localhost:3000/products/info')).json();\n\n  const getProduct = async (): Promise<CartItemType[]> =>\n  await (await fetch('http://localhost:3000/products/2')).json(); \n  \n  const {data, isLoading, error } = useQuery<CartItemType[]>(\n    'product',\n    getProducts\n  );\n  \n  console.log(data);\n  console.log('product')\n  console.log(getProduct);\n\n  const ItemDes: React.FC<Props> = ({ item, handleAddToCart}) => (\n    <Wrapper>\n      <img src={item.img_path} alt={item.name} />\n      <div>\n        <h3>{item.name}</h3>\n        <p>{item.description}</p>\n        <h3>${item.price}</h3>\n      </div>\n      {/* <Button onClick={() => getDetails(item)}>See </Button> */}\n      <MyButtonGrid onClick={() => handleAddToCart(item)}>Add to cart</MyButtonGrid>\n    </Wrapper>\n  );\n\n  return (\n          <div className=\"prdataduct-des\">\n             {/* <h1 id=\"name\">{data?.name}</h1> */}\n             <Grid container spacing={3}>\n              {data?.map(item => (\n                <Grid item key={item.productId} xs={12} sm={3}>\n                   <ItemDes item={item} handleAddToCart={handleAddToCart} />\n                  <p>fff</p>\n                </Grid>\n              ))}\n            </Grid>\n              {/*  <h1 id=\"name\">{e.name}</h1> */}\n              {/* <button className=\"btn add\">Add to cart</button> */}\n          </div>\n        );\n      }\n\n\n\n\n\n\n\n\n\n\n\n\n\n      /* console.log(d) */\n/* const [isLoading, setIsLoading] = useState(true); */\n/* const [data, setData] = useState([] as CartItemType[]); */\n/* useEffect(() => { */\n/*   fetch(`http://localhost:3000/products/2`) */\n/*     .then((res) => res.json()) */\n/*     .then((data) => { */\n/*       setData(data); */\n/*       setIsLoading(false); */\n/*       console.log(`http://localhost:3000/products/1`) */\n/*     }) */\n/*     .catch((error) => console.log(error)); */\n/* }, [data]); */\n\n\n\n\n/* const Prod = (productId: any) => { */\n/*   const [isLoading, setIsLoading] = useState(true); */\n/*   const [data, setData] = useState([] as CartItemType[]); */\n/*   useEffect(() => { */\n/*     fetch(`http://localhost:3000/products/${productId}`, {}) */\n/*       .then((res) => res.json()) */\n/*       .then((response) => { */\n/*         setData(response); */\n/*         setIsLoading(false); */\n/*         console.log(`http://localhost:3000/products/${productId}`) */\n/*       }) */\n/*       .catch((error) => console.log(error)); */\n/*   }, [productId]); */\n/*  */\n\n\nexport default Prod;"]},"metadata":{},"sourceType":"module"}